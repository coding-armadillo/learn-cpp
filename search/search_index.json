{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hello-world","title":"Hello, World!","text":"<p>This is a C++ program, which displays the famous \"Hello, World!\" in the terminal.</p> hello-world.cpp<pre><code>#include &lt;iostream&gt;\nint main()\n{\nstd::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>For comparison, the equivalent Python code looks like the following </p> <pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"#what-is-c","title":"What is C++?","text":"<p>C++ is a general-purpose programming language, created by Bjarne Stroustrup. Over the decades, C++ has become the language of choice for certain kinds of applications. As of September 2022, C++ is ranked 4th in the list of popular programming languages, according to TIOBE index.</p>"},{"location":"#what-is-c-used-for","title":"What is C++ used for?","text":"<ul> <li>Operating systems</li> <li>Game development</li> <li>IoT (Internet of Things) devices</li> <li>Databases</li> <li>Machine learning tools</li> <li>Scientific research</li> <li>...</li> </ul> <p>C++ is most popularly used for building large software infrastructure and applications that run on limited resources. Because C++ can directly manipulate the hardware (or machine) that it runs on, programmers can fine-tune their code to run efficiently in any environment, even when there\u2019s limited hardware space or energy available to power the application ... read more</p>"},{"location":"arrays/","title":"C++ Arrays","text":""},{"location":"arrays/#basics","title":"Basics","text":"<p>Arrays are commonly used to store multiple values. It's one of the basic data structures. We can use it to model a list/array/collection of items. Say, an array of cellphone numbers, an array of first names, etc.</p> <p>To declare an array in C++, we need to specify 3 things, using the square bracket notation.</p> <ul> <li>Data Type</li> <li>Size</li> <li>Name of the array</li> </ul> <p>For example,</p> <pre><code>float scores[5];\n</code></pre> <p>To initialize values in the array during declaration, we can use the curly bracket notation.</p> <pre><code>float scores[5] = {90.5, 88, 75.5, 89, 95.5}\n</code></pre> <p>Or simply omitting the size, the compiler is smart enough to count the number of values to be inserted.</p> <pre><code>float scores[] = {90.5, 88, 75.5, 89, 95.5}\n</code></pre> <p>We can access each of the values in an array by its index, using the square bracket notation. C++ is zero-indexed, meaning the first value in the array has an index of 0.</p> <p>For example, to retrieve the second scores from the <code>scores</code> array, we can simply</p> <pre><code>cout &lt;&lt; scores[1] &lt;&lt; endl;\n</code></pre> <p>If the fourth score should be <code>98</code> instead of <code>89</code>, we can modify the value by index as well</p> <pre><code>scores[3] = 98;\n</code></pre>"},{"location":"arrays/#iteration","title":"Iteration","text":"<p>Since there are multiple values in an array, and each of value can be controlled by its index, we can easily loop through an array with a loop.</p> <p>With a <code>for</code> loop,</p> loop-through-array-1.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring fruits[4] = {\"apple\",\n\"banana\",\n\"coconut\",\n\"durian\"};\nfor (int i = 0; i &lt; 4; i++)\n{\ncout &lt;&lt; fruits[i] &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre> <p>Or with a <code>while</code> loop,</p> loop-through-array-2.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring fruits[4] = {\"apple\",\n\"banana\",\n\"coconut\",\n\"durian\"};\nint i = 0;\nwhile (i &lt; 4)\n{\ncout &lt;&lt; fruits[i] &lt;&lt; endl;\ni++;\n}\nreturn 0;\n}\n</code></pre> <p>Both of the above looping examples are not elegant enough since we hardcoded the number of values in an array, which is not necessary.</p> <p><code>sizeof()</code> would return the size in bytes. When we divide the size in bytes of an array by the size of data type, there comes the number of values.</p> loop-through-array-3.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring fruits[4] = {\"apple\",\n\"banana\",\n\"coconut\",\n\"durian\"};\nint i;\nint size = sizeof(fruits) / sizeof(string);\nfor (i = 0; i &lt; size; i++)\n{\ncout &lt;&lt; fruits[i] &lt;&lt; \" \";\n}\ncout &lt;&lt; endl;\ni = 0;\nwhile (i &lt; size)\n{\ncout &lt;&lt; fruits[i] &lt;&lt; \" \";\ni++;\n}\ncout &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Modern C++ also support <code>foreach</code> like loop to iterate all the values,</p> loop-through-array-4.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring fruits[4] = {\"apple\",\n\"banana\",\n\"coconut\",\n\"durian\"};\nfor (string fruit : fruits)\n{\ncout &lt;&lt; fruit &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"arrays/#assignment-12","title":"Assignment 12","text":"<p>Create a C++ program named <code>score-keeper.cpp</code> that would prompt the user for the number of scores it's going to keep. Then it asks the user to enter a numeric value score for that given number of times. Finally it displays the average of the scores.</p> <p>A sample run looks like the following.</p> <pre><code>g++ score-keeper.cpp -o score-keeper\n./score-keeper\nEnter number of scores: 3\nEnter score: 100\nEnter score: 99\nEnter score: 60\nAverage score is 86.3333\n</code></pre> Sample Solution score-keeper.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint numScores;\ncout &lt;&lt; \"Enter number of scores: \";\ncin &gt;&gt; numScores;\nfloat scores[numScores];\nfor (int i = 0; i &lt; numScores; i++)\n{\ncout &lt;&lt; \"Enter score: \";\ncin &gt;&gt; scores[i];\n}\nfloat total = 0;\nfor (float score : scores)\n{\ntotal += score;\n}\ncout &lt;&lt; \"Average score is \" &lt;&lt; total / numScores &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"arrays/#multi-dimensional-arrays","title":"Multi-Dimensional Arrays","text":"<p>A multi-dimensional array is a set of embedded arrays. For example, a 2D array is an array of arrays. A 3D array is an array of 2D array.</p> <p>To declare a 2D array, define the variable type, specify the name of the array followed by square brackets which specify how many elements the main array has, followed by another set of square brackets which indicates how many elements the sub-arrays have.</p> <p>In case we have higher dimensional arrays, we simply keep on adding square brackets to generate more dimensions.</p> When to use multi-dimensional array? <p>It's natural to model concepts that are multi-dimensional, such as matrix, spreadsheets, and pixels.</p> <p>And when we apply algorithm such as dynamic programming, knowing to to use an array becomes a must.</p> <p>For example, we have to create an array to keep the scores for all 3 students in a class, where all students study the same 4 subjects. We can use a 2D (3x4 or 4x3) array to store the information.</p> <pre><code>float scores[3][4];\n</code></pre> <p>Similar with ordinary arrays, we can initialize the values upon declaration. But since we have more dimensions, the curly bracket notation becomes embedded as well.</p> <pre><code>float scores[3][4] = {\n{90, 85, 64, 72},\n{100, 100, 100, 50},\n{80, 90, 99, 95},\n};\n</code></pre> <p>Accessing and changing values in a multi-dimensional array is conceptually same with the ordinary one. But instead of using one index, we have to use multiple index to refer to its location in different dimensions.</p> <pre><code>scores[0][1]=80;\ncout &lt;&lt; scores[0][1] &lt;&lt; endl;\ncout &lt;&lt; scores[2][3] &lt;&lt; endl;\n</code></pre> <p>And to loop through the entire array, we normally need to use embedded loops.</p> multi-dimensional-arrays.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nfloat scores[3][4] = {\n{90, 85, 64, 72},\n{100, 100, 100, 50},\n{80, 90, 99, 95},\n};\nfor (int i = 0; i &lt; 3; i++)\n{\ncout &lt;&lt; \"Student \" &lt;&lt; i + 1 &lt;&lt; \":\" &lt;&lt; endl;\nfor (int j = 0; j &lt; 4; j++)\n{\ncout &lt;&lt; \"\\tSubject \" &lt;&lt; j + 1 &lt;&lt; \":\" &lt;&lt; scores[i][j] &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"arrays/#assignment-13","title":"Assignment 13","text":"<p>Create a C++ program named <code>multi-score-keeper.cpp</code> that would prompt the number of players to begin with. Then it prompts the user for the number of scores it's going to keep for each player. Then it asks the user to enter numericals for all players' scores. Finally it displays the average of the scores for each player.</p> <p>A sample run looks like the following.</p> <pre><code>g++ multi-score-keeper.cpp -o multi-score-keeper\n./multi-score-keeper\nEnter number of players: 2\nEnter number of scores: 2\n\nPlay 1:\nEnter score 1: 100\nEnter score 2: 90\n\nPlay 2:\nEnter score 1: 80\nEnter score 2: 77\n\nAverage score of Player 1 is 95\nAverage score of Player 2 is 78.5\n</code></pre> Sample Solution multi-score-keeper.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint numPlayers, numScores;\ncout &lt;&lt; \"Enter number of players: \";\ncin &gt;&gt; numPlayers;\ncout &lt;&lt; \"Enter number of scores: \";\ncin &gt;&gt; numScores;\ncout &lt;&lt; endl;\nfloat scores[numPlayers][numScores];\nfloat averages[numPlayers];\nfor (int i = 0; i &lt; numPlayers; i++)\n{\ncout &lt;&lt; \"Player \" &lt;&lt; i + 1 &lt;&lt; \":\" &lt;&lt; endl;\nfor (int j = 0; j &lt; numScores; j++)\n{\ncout &lt;&lt; \"Enter score \" &lt;&lt; j + 1 &lt;&lt; \": \";\ncin &gt;&gt; scores[i][j];\n}\nfloat total = 0;\nfor (float score : scores[i])\n{\ntotal += score;\n}\naverages[i] = total / numScores;\ncout &lt;&lt; endl;\n}\nfor (int i = 0; i &lt; numPlayers; i++)\n{\ncout &lt;&lt; \"Average score of Player \" &lt;&lt; i + 1 &lt;&lt; \" is \" &lt;&lt; averages[i] &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"arrays/#strings","title":"Strings","text":"<p>A <code>string</code> variable in C++ is a collection of characters. We can use the square bracket notation to access and modify the value in a string.</p> <p>For example,</p> strings-demo.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring car = \"tesla\";\ncout &lt;&lt; car[0] &lt;&lt; endl;\ncar[0] = 'T';\ncout &lt;&lt; car &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>For convenience, we can use length() or size() to get the length of a string.</p> <pre><code>cout &lt;&lt; car.length() &lt;&lt; endl;\ncout &lt;&lt; car.size() &lt;&lt; endl;\n</code></pre> <p>The <code>+</code> operator when used with strings, it operates as concatenation.</p> strings-concat.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring firstName = \"Peter\";\nstring lastName = \"Parker\";\nstring fullName = firstName + \" \" + lastName;\ncout &lt;&lt; fullName &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>In C++ a <code>string</code> variable can store whitespaces. But <code>cin</code> considers whitespaces as a terminating character. If we want the freeform text from terminal, use <code>getline</code> instead.</p> strings-getline.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring input1;\ncin &gt;&gt; input1;\ncout &lt;&lt; input1 &lt;&lt; endl;\nstring input2;\ngetline(cin, input2);\ncout &lt;&lt; input2 &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>There are other functions that may be useful for <code>string</code>.</p> <p>For example,</p> strings-functions.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring car = \"tesla\";\ncout &lt;&lt; car &lt;&lt; endl;\ncar.push_back('!');\ncout &lt;&lt; car &lt;&lt; endl;\ncar.pop_back();\ncout &lt;&lt; car &lt;&lt; endl;\ncar.erase(0, 1);\ncout &lt;&lt; car &lt;&lt; endl;\ncar.insert(0, \"T\");\ncout &lt;&lt; car &lt;&lt; endl;\ncar.append(\" and Ford!\");\ncout &lt;&lt; car &lt;&lt; endl;\nstring number1 = \"123\";\ncout &lt;&lt; stoi(number1) + 100 &lt;&lt; endl;\nstring number2 = \"123.45\";\ncout &lt;&lt; stof(number2) + 100 &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"arrays/#assignment-14","title":"Assignment 14","text":"<p>Let's use J3 from 2021 as an exercise.</p> Sample Solution 2021-J3.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring s, prev;\nwhile (true)\n{\ncin &gt;&gt; s;\nif (s == \"99999\")\n{\nbreak;\n}\nint sum = int(s[0] - '0') + stoi(s.substr(1, 1));\ncout &lt;&lt; sum &lt;&lt; endl;\nif (sum == 0)\n{\ncout &lt;&lt; prev &lt;&lt; \" \";\n}\nelse if (sum % 2)\n{\nprev = \"left\";\ncout &lt;&lt; \"left \";\n}\nelse\n{\nprev = \"right\";\ncout &lt;&lt; \"right \";\n}\ncout &lt;&lt; s.substr(2, 3) &lt;&lt; endl;\n}\n}\n</code></pre>"},{"location":"arrays/#dynamic-programming","title":"Dynamic Programming","text":"<p>We often use multi-dimensional arrays to solve dynamic programming problems. Let's solve Lattice paths.</p> <p>Dynamic programming is a method to simplify a complex problem into simpler sub-problems recursively. In this manner we can forward propagate to find the result by solving easy problems.</p> <p>Use the Lattice paths problem for example. Think about the scenarios for:</p> <ol> <li>0x0 grid</li> <li>1x1 grid</li> <li>1x2 grid</li> <li>2x1 grid</li> </ol>"},{"location":"arrays/#assignment-15","title":"Assignment 15","text":"<p>Create a C++ program named <code>edit-distance.cpp</code> that would prompt the user for two strings. Given two strings <code>str1</code> and <code>str2</code> and below operations that can be performed on <code>str1</code>. Find minimum number of edits (operations) required to convert <code>str1</code> into <code>str2</code>.</p> <ol> <li>Insert</li> <li>Remove</li> <li>Replace</li> </ol> <p>Here are a few examples.</p>"},{"location":"arrays/#example-1","title":"Example 1","text":"<p>Input:   str1 = \"cat\", str2 = \"cut\"</p> <p>Output:  1</p> <p>Explanation: We can convert str1 into str2 by replacing <code>a</code> with <code>u</code>.</p>"},{"location":"arrays/#example-2","title":"Example 2","text":"<p>Input:   str1 = \"sunday\", str2 = \"saturday\"</p> <p>Output:  3</p> <p>Explanation: Last three and first characters are same.  We basically need to convert <code>un</code> to <code>atur</code>.  This can be done using below three operations. Replace <code>n</code> with <code>r</code>, insert t, insert a</p> <p>A sample run looks like the following.</p> <pre><code>g++ edit-distance.cpp -o edit-distance\n./edit-distance\nstr1: sunday\nstr2: saturday\nedit distance is 3\n</code></pre>"},{"location":"basics/","title":"Basics of C++","text":""},{"location":"basics/#file-extension","title":"File extension","text":"<p>We use <code>.cpp</code> for C++ source codes.</p>"},{"location":"basics/#execution","title":"Execution","text":"<p>C++ is a compiled language, meaning that it will be translated into machine codes that can be understood directly by the system. Hence, in order to execute a C++ program, we need to compile then run the executable.</p> <p>Let's use the <code>Hello, World!</code> program as an example.</p> hello-world.cpp<pre><code>#include &lt;iostream&gt;\nint main()\n{\nstd::cout &lt;&lt; \"Hello, World!\" &lt;&lt; std::endl;\nreturn 0;\n}\n</code></pre> <p>Simply we run</p> <pre><code>g++ hello-world.cpp\n</code></pre> <p>An executable with the default name <code>a</code> will be created.</p> <p>On Windows, we should see <code>a.exe</code>. On macOS/Linux, we should see <code>a.out</code>.</p> <p>We can also use the <code>-o</code> flag to specify the name of the executable.</p> <pre><code>g++ hello-world.cpp -o hello-world\n</code></pre> <p>In this case, the named executable will generate.</p> <p>After all, we can run the executable and expect <code>Hello, World!</code> to be printed in the terminal.</p>"},{"location":"basics/#semicolons","title":"Semicolons","text":"<p>Every C++ statement ends with a semicolon (<code>;</code>).</p>"},{"location":"basics/#variables","title":"Variables","text":"<p>Variables are containers for values.</p> <p>C++ is static typed, meaning that to create a variable, we have to specify the type so that we can assign value accordingly.</p> <p>In C++, there are some basic types of variables:</p> <ul> <li><code>int</code></li> <li><code>float</code></li> <li><code>double</code></li> <li><code>char</code></li> <li><code>string</code></li> <li><code>bool</code></li> </ul> create-variables.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint a;\nfloat b;\ndouble c;\nchar d;\nstring e;\nbool f;\nreturn 0;\n}\n</code></pre> <p>When we create variables, we can use assignment operator <code>=</code> to initialize a value.</p> create-variables-with-values.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint a = 128;\nfloat b = 0.1;\ndouble c = 0.3;\nchar d = 'A';\nstring e = \"Hello, World!\";\nbool f = true;\nreturn 0;\n}\n</code></pre> <p>We can also create constants that cannot change their values.</p> modify-constant.cpp<pre><code>int main()\n{\nconst int value = 1;\nvalue = 2;\nreturn 0;\n}\n</code></pre> <p>Try to compile the codes above, an error shall raise  :</p> <pre><code>.\\modify-constant.cpp: In function 'int main()':\n.\\modify-constant.cpp:8:11: error: assignment of read-only variable 'value'\n    8 |     value = 2;\n      |     ~~~~~~^~~\n</code></pre>"},{"location":"basics/#output","title":"Output","text":"<p>To display values in the terminal, we use <code>cout</code> together with <code>&lt;&lt;</code> operator.</p> <p>To display a newline character, use <code>endl</code>.</p> print-variables.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint a = 128;\nfloat b = 0.1;\ndouble c = 0.3;\nchar d = 'A';\nstring e = \"Hello, World!\";\nbool f = true;\ncout &lt;&lt; \"a is \" &lt;&lt; a &lt;&lt; endl;\ncout &lt;&lt; \"b is \" &lt;&lt; b &lt;&lt; endl;\ncout &lt;&lt; \"c is \" &lt;&lt; c &lt;&lt; endl;\ncout &lt;&lt; \"d is \" &lt;&lt; d &lt;&lt; endl;\ncout &lt;&lt; \"e is \" &lt;&lt; e &lt;&lt; endl;\ncout &lt;&lt; \"f is \" &lt;&lt; f &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"basics/#user-input","title":"User Input","text":"<p>While <code>cout</code> is used to output, we use <code>cin</code>, together with <code>&gt;&gt;</code> operator, to capture user input.</p> input-x.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint x;\ncout &lt;&lt; \"Value of x is \";\ncin &gt;&gt; x;\ncout &lt;&lt; \"x is \" &lt;&lt; x &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"basics/#comments","title":"Comments","text":"<p>In C++ we use <code>//</code> to comment out a single line, everything after <code>//</code> is ignored by the compiler.</p> <p>We can use it in end of line</p> <pre><code>int x = 1; // x is 1\n</code></pre> <p>or from the beginning</p> <pre><code>// y is 2\nint y = 2;\n</code></pre> <p>In case we need to provide a long piece of text as comment, use a pair of <code>/*</code> and <code>*/</code>. Any text in-between will be ignored by the complier.</p> <pre><code>/* z is supposed to be 3\nbut ends up being 4 */\nint z = 4;\n</code></pre>"},{"location":"basics/#assignment-1","title":"Assignment 1","text":"<p>Write a C++ program named <code>greeting.cpp</code> to ask user for his/her <code>name</code> and display \"Hello, <code>name</code>\".</p> <p>The workflow the program is as follows:</p> <ol> <li>The command line would prompt \"What is your name? \"</li> <li>Suppose we enter \"Jack\".</li> <li>The command line displays \"Hello, Jack\"</li> </ol> Sample Solution greeting.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring name;\ncout &lt;&lt; \"What is your name? \";\ncin &gt;&gt; name;\ncout &lt;&lt; \"Hello, \" &lt;&lt; name &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"basics/#operators","title":"Operators","text":""},{"location":"basics/#arithmetic-operators","title":"Arithmetic Operators","text":"<ul> <li><code>+</code> for addition</li> <li><code>-</code> for subtraction</li> <li><code>*</code> for multiplication</li> <li><code>/</code> for division</li> <li><code>%</code> for modulus</li> <li><code>++</code> for increment by 1</li> <li><code>--</code> for decrement by 1</li> </ul>"},{"location":"basics/#assignment-operators","title":"Assignment Operators","text":"<p>We use <code>=</code> to assign value to a variable, just like we mention earlier.</p> <p>We can also chain <code>=</code> with the arithmetic operators to simply the code</p> <p>For example,</p> <pre><code>int a = 1;\na = a + 2;\n</code></pre> <p>is equivalent to</p> <pre><code>int a = 1;\na += 2;\n</code></pre>"},{"location":"basics/#comparison-operators","title":"Comparison Operators","text":"<p>Comparison operators are used to compare two values. They always return a boolean (<code>true</code>/<code>false</code>).</p> compare.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nconst int a = 1;\nconst int b = 2;\ncout &lt;&lt; (a &gt; b) &lt;&lt; endl;  // Greater than\ncout &lt;&lt; (a &lt; b) &lt;&lt; endl;  // Less than\ncout &lt;&lt; (a &gt;= b) &lt;&lt; endl; // No less than\ncout &lt;&lt; (a &lt;= b) &lt;&lt; endl; // No greater than\ncout &lt;&lt; (a == b) &lt;&lt; endl; // Equal to\ncout &lt;&lt; (a != b) &lt;&lt; endl; // Not equal to\nreturn 0;\n}\n</code></pre>"},{"location":"basics/#logical-operators","title":"Logical Operators","text":"<p>Logical operators are used to determine the logic between variables or values</p> <ul> <li><code>&amp;&amp;</code> for logical and</li> <li><code>||</code> for logical or</li> <li><code>!</code> for logical not</li> </ul> logical.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nconst int a = 1;\nconst int b = 2;\ncout &lt;&lt; ((a &gt; b) &amp;&amp; (a &lt; b)) &lt;&lt; endl;\ncout &lt;&lt; ((a &gt;= b) || (a &lt;= b)) &lt;&lt; endl;\ncout &lt;&lt; !(a == b) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"basics/#assignment-2","title":"Assignment 2","text":"<p>Write a C++ program named <code>circle.cpp</code> that prompts for the diameter (cm) of a circle and computes and displays the circle's area and circumference.</p> <p>We can assume <code>\u03c0</code> equals 3.14159.</p> Sample Solution circle.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\ndouble diameter;\ncout &lt;&lt; \"Enter Diameter: \";\ncin &gt;&gt; diameter;\ndouble pi = 3.14159;\ndouble radius = diameter / 2;\ndouble area = pi * radius * radius;\ndouble circumference = pi * diameter;\ncout &lt;&lt; \"Area = \" &lt;&lt; area &lt;&lt; endl;\ncout &lt;&lt; \"Circumference = \" &lt;&lt; circumference &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"basics/#assignment-3","title":"Assignment 3","text":"<p>Write a C++ program name <code>triangle.cpp</code> that prompts for the lengths of 3 sides of a triangle and displays the area of that triangle.</p> <p>Check out Heron' formula if not sure about the math.</p> <p>And we can find the square root function from <code>&lt;cmath&gt;</code></p> Sample Solution triangle.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;cmath&gt;\nusing namespace std;\nint main()\n{\nfloat a, b, c;\ncout &lt;&lt; \"Side a: \";\ncin &gt;&gt; a;\ncout &lt;&lt; \"Side b: \";\ncin &gt;&gt; b;\ncout &lt;&lt; \"Side c: \";\ncin &gt;&gt; c;\nfloat s, area;\ns = (a + b + c) / 2;\narea = sqrt(s * (s - a) * (s - b) * (s - c));\ncout &lt;&lt; \"Area is \" &lt;&lt; area;\n}\n</code></pre>"},{"location":"ccc/","title":"CCC","text":"<p>The Canadian Computing Competition (CCC) is a fun challenge for students with an interest in programming. Designed to be both accessible to students with some programming experience and to challenge the keenest programmers at the secondary-school level, the CCC helps students build confidence and grow their ability to design, understand and implement algorithms.</p> <p>See more from official site. Let's give it a try</p>"},{"location":"ccc/#j1","title":"J1","text":"<p>With what we have learned so far, we should be able to solve most J1 and J2 problems.</p> <p>For example, let's take a look at J1 from 2020's contest.</p> Sample Solution for 2020-J1 2020-J1<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint s, m, l;\ncin &gt;&gt; s &gt;&gt; m &gt;&gt; l;\nint score = (1 * s) + (2 * m) + (3 * l);\nif (score &gt;= 10)\n{\ncout &lt;&lt; \"Happy\" &lt;&lt; endl;\n}\nelse\n{\ncout &lt;&lt; \"sad\" &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre> <p>Similarly, J1 from 2021 and 2022 are both straightforward translation of formula. The key is to understand the problem statement.</p> Sample Solution for 2021-J1 2021-J1<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint b;\ncin &gt;&gt; b;\nint p = 5 * b - 400;\ncout &lt;&lt; p &lt;&lt; endl;\nif (p == 100)\n{\ncout &lt;&lt; 0 &lt;&lt; endl;\n}\nelse if (p &lt; 100)\n{\ncout &lt;&lt; 1 &lt;&lt; endl;\n}\nelse\n{\ncout &lt;&lt; -1 &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre> Sample Solution for 2022-J1 2022-J1<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint r, s;\ncin &gt;&gt; r &gt;&gt; s;\ncout &lt;&lt; (8 * r + 3 * s) - 28 &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"ccc/#j2","title":"J2","text":"<p>J2 is usually a bit more complex than J1. It's likely that you may at least use some forms of loops.</p> <p>For example, let's take a look at J2 from 2022's contest.</p> Sample Solution for 2022-J2 2022-J2<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint n;\ncin &gt;&gt; n;\nint count = 0;\nfor (int i = 0; i &lt; n; i++)\n{\nint points, fouls;\ncin &gt;&gt; points &gt;&gt; fouls;\nint stars = (5 * points) - (3 * fouls);\nif (stars &gt; 40)\n{\ncount += 1;\n}\n}\ncout &lt;&lt; count;\nif (count == n)\n{\ncout &lt;&lt; \"+\";\n}\ncout &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"ccc/#more-exercise","title":"More Exercise","text":"<p>All the past contests can be found online. We can also use DMOJ to evaluate the solutions online.</p> <p>Project Euler and Advent of Code are also good resources if you want to practice coding and problem solving skills.</p>"},{"location":"conditionals/","title":"Conditional statements in C++","text":"<p>C++ has <code>if</code>-<code>else</code> and <code>switch</code> to determine whether statements would execute based on a given condition.</p>"},{"location":"conditionals/#if-statement","title":"<code>if</code> statement","text":"<p>Use <code>if</code> to specify a block of code to be executed, if a specified condition is <code>true</code>. The syntax is as follows.</p> <pre><code>if (condition) {\n// statements\n}\n</code></pre> <p>For example,</p> test-if.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint a, b;\ncout &lt;&lt; \"a is \";\ncin &gt;&gt; a;\ncout &lt;&lt; \"b is \";\ncin &gt;&gt; b;\nif (a &gt; b)\n{\ncout &lt;&lt; \"a is greater than b\" &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"conditionals/#else-statement","title":"<code>else</code> statement","text":"<p>Use <code>else</code> to specify a block of code to be executed, if the same condition is <code>false</code>. The syntax is as follows.</p> <pre><code>if (condition)\n{\n// statements\n}\nelse\n{\n// other statements\n}\n</code></pre> <p>For example,</p> test-if-else.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint a, b;\ncout &lt;&lt; \"a is \";\ncin &gt;&gt; a;\ncout &lt;&lt; \"b is \";\ncin &gt;&gt; b;\nif (a &gt; b)\n{\ncout &lt;&lt; \"a is greater than b\" &lt;&lt; endl;\n}\nelse\n{\ncout &lt;&lt; \"a is no greater than b\" &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"conditionals/#else-if-statement","title":"<code>else if</code> statement","text":"<p>Use the <code>else if</code> statement to specify a new condition if the first condition is <code>false</code>. The syntax is as follows.</p> <pre><code>if (condition1)\n{\n// statements for condition1\n}\nelse if (condition2)\n{\n// statements for condition2\n}\nelse\n{\n// other statements\n}\n</code></pre> <p>For example,</p> test-if-elif-else.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint a, b;\ncout &lt;&lt; \"a is \";\ncin &gt;&gt; a;\ncout &lt;&lt; \"b is \";\ncin &gt;&gt; b;\nif (a &gt; b)\n{\ncout &lt;&lt; \"a is greater than b\" &lt;&lt; endl;\n}\nelse if (a == b)\n{\ncout &lt;&lt; \"a equals b\" &lt;&lt; endl;\n}\nelse\n{\ncout &lt;&lt; \"a is less than b\" &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"conditionals/#takeaway","title":"Takeaway","text":"<p>Only <code>if</code> is required, <code>else</code> and <code>else if</code> are both optional.</p>"},{"location":"conditionals/#ternary-operator","title":"Ternary Operator","text":"<pre><code>variable = (condition) ? valueIfTrue: valueIfFalse\n</code></pre> <p>This is equivalent to</p> <pre><code>if (condition)\n{\nvariable = valueIfTrue;\n}\nelse\n{\nvariable = valueIfFalse;\n}\n</code></pre> <p>For example,</p> show-num-records.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint num;\ncout &lt;&lt; \"num is \";\ncin &gt;&gt; num;\nstring be = (num &gt; 1) ? \"are \" : \"is \";\nchar s = (num &gt; 1) ? 's' : '\\0';\ncout &lt;&lt; \"There \" &lt;&lt; be &lt;&lt; num &lt;&lt; \" record\" &lt;&lt; s &lt;&lt; \".\" &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"conditionals/#assignment-4","title":"Assignment 4","text":"<p>Create a C++ program named <code>bmi-calculator.cpp</code> that prompts for weight in pounds and height in inches. It does not only calculates and displays the body mass index (BMI), but will also prompt the BMI classification.</p> <p>FYI, <code>BMI = (Weight in Pounds / (Height in inches x Height in inches)) x 703</code></p> <p>The BMI classification is as follows.</p> BMI BMI Classification 18.5 or less Underweight 18.5 to 24.99 Normal Weight 25 to 29.99 Overweight 30 to 34.99 Obesity (Class 1) 35 to 39.99 Obesity (Class 2) 40 or greater Morbid Obesity Sample Solution bmi-calculator.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nfloat weight, height;\ncout &lt;&lt; \"weight (in pound) is \";\ncin &gt;&gt; weight;\ncout &lt;&lt; \"height (in inch) is \";\ncin &gt;&gt; height;\nfloat bmi = weight / (height * height) * 703;\nstring classification;\nif (bmi &lt;= 18.5)\n{\nclassification = \"Underweight\";\n}\nelse if (bmi &lt;= 25)\n{\nclassification = \"Normal Weight\";\n}\nelse if (bmi &lt;= 30)\n{\nclassification = \"Overweight\";\n}\nelse if (bmi &lt;= 35)\n{\nclassification = \"Obesity (Class 1)\";\n}\nelse if (bmi &lt;= 40)\n{\nclassification = \"Obesity (Class 2)\";\n}\nelse\n{\nclassification = \"Morbid Obesity\";\n}\ncout &lt;&lt; \"BMI is \" &lt;&lt; bmi &lt;&lt; endl;\ncout &lt;&lt; \"BMI classification is \" &lt;&lt; classification &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"conditionals/#switch-statement","title":"<code>switch</code> statement","text":"<p>In C++ we can use the <code>switch</code> statement to select one of many code blocks to be executed. The syntax is as follows.</p> <pre><code>switch(expression) {\ncase value1:\n// code block 1\nbreak;\ncase value2:\n// code block 2\nbreak;\ncase value3:\n// code block 3\ndefault:\n// code block default\n}\n</code></pre> <ul> <li>The <code>expression</code> is evaluated once.</li> <li>The value of <code>expression</code> is then compared with values in each of <code>case</code>. When there's a match, the according code bock will execute.</li> <li>The <code>break</code> allows us to break out of <code>switch</code> block and to stop further <code>case</code> testing. Usually, if there's a match, we can <code>break</code> afterwards. But there are exceptions.</li> <li>The <code>default</code> specifies what to do if there's no match.</li> </ul> <p>Here's a regular use case of <code>switch</code>.</p> month-num-to-name.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint month;\ncout &lt;&lt; \"month is \";\ncin &gt;&gt; month;\nswitch (month)\n{\ncase 1:\ncout &lt;&lt; \"Jan\" &lt;&lt; endl;\nbreak;\ncase 2:\ncout &lt;&lt; \"Feb\" &lt;&lt; endl;\nbreak;\ncase 3:\ncout &lt;&lt; \"Mar\" &lt;&lt; endl;\nbreak;\ncase 4:\ncout &lt;&lt; \"Apr\" &lt;&lt; endl;\nbreak;\ncase 5:\ncout &lt;&lt; \"May\" &lt;&lt; endl;\nbreak;\ncase 6:\ncout &lt;&lt; \"Jun\" &lt;&lt; endl;\nbreak;\ncase 7:\ncout &lt;&lt; \"Jul\" &lt;&lt; endl;\nbreak;\ncase 8:\ncout &lt;&lt; \"Aug\" &lt;&lt; endl;\nbreak;\ncase 9:\ncout &lt;&lt; \"Sept\" &lt;&lt; endl;\nbreak;\ncase 10:\ncout &lt;&lt; \"Oct\" &lt;&lt; endl;\nbreak;\ncase 11:\ncout &lt;&lt; \"Nov\" &lt;&lt; endl;\nbreak;\ncase 12:\ncout &lt;&lt; \"Dec\" &lt;&lt; endl;\nbreak;\ndefault:\ncout &lt;&lt; \"Invalid\" &lt;&lt; endl;\nbreak;\n}\nreturn 0;\n}\n</code></pre> <p>Here's a special usage of not haveing to <code>break</code></p> month-num-to-season.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint month;\ncout &lt;&lt; \"month is \";\ncin &gt;&gt; month;\nswitch (month)\n{\ncase 12:\ncase 1:\ncase 2:\ncout &lt;&lt; \"Winter\" &lt;&lt; endl;\nbreak;\ncase 3:\ncase 4:\ncase 5:\ncout &lt;&lt; \"Spring\" &lt;&lt; endl;\nbreak;\ncase 6:\ncase 7:\ncase 8:\ncout &lt;&lt; \"Summer\" &lt;&lt; endl;\nbreak;\ncase 9:\ncase 10:\ncase 11:\ncout &lt;&lt; \"Fall\" &lt;&lt; endl;\nbreak;\ndefault:\ncout &lt;&lt; \"Invalid\" &lt;&lt; endl;\nbreak;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"conditionals/#assignment-5","title":"Assignment 5","text":"<p>Create a C++ program named <code>grades.cpp</code> that prompts for a grade in percentage and translates it to a letter grade.</p> <p>By the way the letter grade assignment is as follow.</p> Percentage Letter Grade 90-100 A 80-89 B 70-79 C 60-69 D &lt; 60 F Sample Solution grades.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nfloat grade;\ncout &lt;&lt; \"percentage grade is \";\ncin &gt;&gt; grade;\nif ((grade &gt; 100) || (grade &lt; 0))\n{\ncout &lt;&lt; \"Invalid\" &lt;&lt; endl;\n}\nelse\n{\nint level = grade / 10;\nswitch (level)\n{\ncase 10:\ncase 9:\ncout &lt;&lt; \"A\" &lt;&lt; endl;\nbreak;\ncase 8:\ncout &lt;&lt; \"B\" &lt;&lt; endl;\nbreak;\ncase 7:\ncout &lt;&lt; \"C\" &lt;&lt; endl;\nbreak;\ncase 6:\ncout &lt;&lt; \"D\" &lt;&lt; endl;\nbreak;\ncase 5:\ncase 4:\ncase 3:\ncase 2:\ncase 1:\ncase 0:\ncout &lt;&lt; \"F\" &lt;&lt; endl;\nbreak;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"functions/","title":"C++ Functions","text":"<p>A function is a block of code that runs when it is called. It can take data as input (known as parameters) and generate output (know as return value).</p> <p>Functions are used to create reusable and modular codes.</p>"},{"location":"functions/#declaration-definition-and-execution","title":"Declaration, Definition, and Execution","text":"<p>A C++ function consists of two parts:</p> <ul> <li>Declaration: the function name, parameters if any, and return type</li> <li>Definition: the body of function</li> </ul> <p>To execute a function, invoke the name with <code>()</code> and provide parameters if required.</p> <p>For example</p> func-say-hi.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid sayHi()\n{ // declaration\n// the body of the function (definition)\ncout &lt;&lt; \"Hi\" &lt;&lt; endl;\n}\nint main()\n{\ncout &lt;&lt; \"Hello, World!\" &lt;&lt; endl;\nsayHi();\nreturn 0;\n}\n</code></pre> <p>We create a function called <code>sayHi()</code> which takes no parameters and returns nothing (<code>void</code>).</p> <p>It's important to know that user-defined function needs to be declared before <code>main()</code>. Otherwise, an error will occur, as follow.</p> func-say-hi-error.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\ncout &lt;&lt; \"Hello, World!\" &lt;&lt; endl;\nsayHi();\nreturn 0;\n}\nvoid sayHi()\n{ // declaration\n// the body of the function (definition)\ncout &lt;&lt; \"Hi\" &lt;&lt; endl;\n}\n</code></pre> <pre><code>func-say-hi-error.cpp:9:5: error: use of undeclared identifier 'sayHi'\n    sayHi();\n    ^\n1 error generated.\n</code></pre> <p>However, we can fix it by separating the declaration and the definition. Later we would see it's normal to use header files to declare functions and then implement those functions in separate cpp files.</p> func-say-hi-error-fix.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid sayHi();\nint main()\n{\ncout &lt;&lt; \"Hello, World!\" &lt;&lt; endl;\nsayHi();\nreturn 0;\n}\nvoid sayHi()\n{ // declaration\n// the body of the function (definition)\ncout &lt;&lt; \"Hi\" &lt;&lt; endl;\n}\n</code></pre>"},{"location":"functions/#parameters","title":"Parameters","text":"<p>Data can be passed to functions as parameters. Parameters act as variables inside the function.</p> <p>Parameters are specified after the function name, inside the pair of parentheses. We can specify as many parameters as we want, just separate them with a comma. And for each parameter, make sure we specify the data type.</p> <p>For example</p> func-say-hi-by-person.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid sayHi(string name)\n{ // declaration\n// the body of the function (definition)\ncout &lt;&lt; name &lt;&lt; \" says Hi!\" &lt;&lt; endl;\n}\nint main()\n{\ncout &lt;&lt; \"Hello, World!\" &lt;&lt; endl;\nsayHi(\"Jack\");\nreturn 0;\n}\n</code></pre> <p>In case we have more parameters</p> func-say-hi-by-person-multiple-times.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid sayHi(string name, int times)\n{ // declaration\n// the body of the function (definition)\nfor (int i = 0; i &lt; times; i++)\n{\ncout &lt;&lt; i + 1 &lt;&lt; \": \" &lt;&lt; name &lt;&lt; \" says Hi!\" &lt;&lt; endl;\n}\n}\nint main()\n{\ncout &lt;&lt; \"Hello, World!\" &lt;&lt; endl;\nsayHi(\"Jack\", 5);\nreturn 0;\n}\n</code></pre> <p>We can also use a default parameter value, by specifying the value after <code>=</code>.</p> func-say-hi-by-person-multiple-times-default.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nvoid sayHi(string name, int times = 10)\n{ // declaration\n// the body of the function (definition)\nfor (int i = 0; i &lt; times; i++)\n{\ncout &lt;&lt; i + 1 &lt;&lt; \": \" &lt;&lt; name &lt;&lt; \" says Hi!\" &lt;&lt; endl;\n}\n}\nint main()\n{\ncout &lt;&lt; \"Hello, World!\" &lt;&lt; endl;\nsayHi(\"Jack\", 5);\ncout &lt;&lt; endl;\nsayHi(\"Jill\");\nreturn 0;\n}\n</code></pre>"},{"location":"functions/#return-value","title":"Return Value","text":"<p>The example functions above use the <code>void</code> as return value, indicating not to expect a return value. If a function shall return a value, specify the data type in declaration and use the <code>return</code> keyword in the definition of a function.</p> <p>For example</p> func-add.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint add(int a, int b)\n{ // declaration\n// the body of the function (definition)\nreturn a + b;\n}\nint main()\n{\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\ncout &lt;&lt; add(a, b) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"functions/#function-overloading","title":"Function Overloading","text":"<p>With function overloading, multiple functions can have the same name with different parameters.</p> <p>For example</p> func-add-overloading.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint add(int a, int b)\n{ // declaration\n// the body of the function (definition)\nreturn a + b;\n}\nfloat add(float a, float b)\n{ // declaration\n// the body of the function (definition)\nreturn a + b;\n}\nfloat add(float a, float b, float c, float d)\n{ // declaration\n// the body of the function (definition)\nreturn add(add(a, b), add(c, d));\n}\nint main()\n{\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\ncout &lt;&lt; add(a, b) &lt;&lt; endl;\nfloat c, d;\ncin &gt;&gt; c &gt;&gt; d;\ncout &lt;&lt; add(c, d) &lt;&lt; endl;\nfloat e, f, g, h;\ncin &gt;&gt; e &gt;&gt; f &gt;&gt; g &gt;&gt; h;\ncout &lt;&lt; add(e, f, g, h) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"functions/#pass-by-reference","title":"Pass by Reference","text":"<p>Normally data passed by parameters are used as values in a function, meaning that it does not change the original value if you apply some logic within a function.</p> <p>Let's rewrite the <code>add()</code> function such that the parameters increment themselves before being added.</p> func-by-value.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint add(int a, int b)\n{ // declaration\n// the body of the function (definition)\na += 1;\nb += 1;\nreturn a + b;\n}\nint main()\n{\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\ncout &lt;&lt; \"before add(): \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\ncout &lt;&lt; add(a, b) &lt;&lt; endl;\ncout &lt;&lt; \"after  add(): \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>However, when we use <code>&amp;</code> in the parameter, the parameter would pass as reference, meaning that the logic applied in the function would modify the original value.</p> <p>For example</p> func-by-reference.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint add(int &amp;a, int &amp;b)\n{ // declaration\n// the body of the function (definition)\na += 1;\nb += 1;\nreturn a + b;\n}\nint main()\n{\nint a, b;\ncin &gt;&gt; a &gt;&gt; b;\ncout &lt;&lt; \"before add(): \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\ncout &lt;&lt; add(a, b) &lt;&lt; endl;\ncout &lt;&lt; \"after  add(): \" &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"functions/#array-as-parameter","title":"Array as parameter","text":"<p>By the way, we can also specify a parameter to be an array.</p> <p>For example</p> func-add-array.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint add(int values[10])\n{ // declaration\n// the body of the function (definition)\nint sum = 0;\nfor (int i = 0; i &lt; 10; i++)\n{\nsum += values[i];\n}\nreturn sum;\n}\nint main()\n{\nint numbers[10];\nfor (int i = 0; i &lt; 10; i++)\n{\ncin &gt;&gt; numbers[i];\n}\ncout &lt;&lt; add(numbers) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"functions/#recursion","title":"Recursion","text":"<p>Recursion is the technique of making a function call itself. (The example in overloading is actually not recursion. Why?) This technique provides a way to break complicated problems down into simple problems which are easier to solve.</p> <p>For example, Fibonacci sequence</p> <p><code>0 1 1 2 3 5 8 13 ...</code></p> <p>can be defined in a recursive way, say <code>Fib(n)</code>, such that</p> <pre><code>Fib(0)=0\nFib(1)=1\n</code></pre> <p>For all integers n, where <code>n &gt; 1</code></p> <pre><code>Fib(n) = Fib(n-1) + Fib(n-2)\n</code></pre> <p>Let's implement it in <code>C++</code>.</p> func-fib.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint fib(int n)\n{ // declaration\n// the body of the function (definition)\nif (n == 0)\n{\nreturn 0;\n}\nelse if (n == 1)\n{\nreturn 1;\n}\nelse\n{\nreturn fib(n - 1) + fib(n - 2);\n}\n}\nint main()\n{\nint n;\ncin &gt;&gt; n;\ncout &lt;&lt; fib(n) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"functions/#assignment-17","title":"Assignment 17","text":"<p>Kattis Probelm / Bus</p>"},{"location":"get-started/","title":"Getting Started","text":"<p>To start using C++, we need two things:</p> <ul> <li>A compiler</li> <li>A text editor</li> </ul>"},{"location":"get-started/#compiler","title":"Compiler","text":"<p>For Windows users, we can use the WinLibs standalone build of GCC and MinGW-w64.</p> <p>Let's get the Universal C Runtime version from WinLibs. As of September 2022, the latest version is <code>GCC 12.2.0 + LLVM/Clang/LLD/LLDB 14.0.6 + MinGW-w64 10.0.0 (UCRT) - release 2</code>.</p> <p>Download the zip file and extract to a preferable location. Then add the path of that preferable location in the <code>PATH</code> environment variable.</p> <p>To verify the installation of compiler, open a new terminal and run</p> <pre><code>g++ -v\n</code></pre> <p>If the version displays, we are good to go.</p>"},{"location":"get-started/#text-editor","title":"Text Editor","text":"<p>We recommend using Visual Studio Code as the coding interface. Also make sure we install the <code>C/C++</code> extension.</p>"},{"location":"loops/","title":"Loops in C++","text":"<p>Loops are indented to repeat a block of codes as long as a condition is met. There are different forms of loops in C++.</p>"},{"location":"loops/#while-statement","title":"<code>while</code> statement","text":"<p>The <code>while</code> loop repeats a block of code as long as a specified condition is <code>true</code>. The syntax is as follows.</p> <pre><code>while (condition){\n// code block to repeat\n}\n</code></pre> <p>For example,</p> print-till-ten-with-while.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint i = 1;\nwhile (i &lt;= 10)\n{\ncout &lt;&lt; i &lt;&lt; endl;\ni++;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"loops/#do-while-statement","title":"<code>do-while</code> statement","text":"<p>The <code>do-while</code> loop is a variant of the <code>while</code> loop. This loop will at least execute the code block once. Then it will repeat the loop as long as the condition is <code>true</code>. The syntax is as follows.</p> <pre><code>do {\n// code block to repeat\n}\nwhile (condition);\n</code></pre> <p>For example,</p> print-num.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint i;\ncout &lt;&lt; \"i is \";\ncin &gt;&gt; i;\ndo\n{\ncout &lt;&lt; i &lt;&lt; endl;\ni++;\n} while (i &lt;= 10);\nreturn 0;\n}\n</code></pre> <p>Compile and execute the program above and see how the program responses given different input.</p>"},{"location":"loops/#for-statement","title":"<code>for</code> statement","text":"<p>If we know exactly how many times you want to repeat a block of code, use the <code>for</code> loop is a good option. The syntax is as follows.</p> <pre><code>for (statement1; statement2; statement3) {\n// code block to repeat\n}\n</code></pre> <ul> <li><code>statement1</code> is executed (one time) before the execution of the code block.</li> <li><code>statement2</code> defines the condition for executing the code block.</li> <li><code>statement3</code> is executed (every time) after the code block has been executed.</li> </ul> <p>For example,</p> print-till-ten-with-for.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nfor (int i = 1; i &lt;= 10; i++)\n{\ncout &lt;&lt; i &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"loops/#break-and-continue","title":"<code>break</code> and <code>continue</code>","text":"<ul> <li><code>break</code> can be used to have an early exit and jump out of a loop.</li> <li><code>continue</code> only breaks the current iteration and continues with next iteration in the loop.</li> </ul> <p>For example,</p> test-flow.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nfor (int i = 1; i &lt;= 10; i++)\n{\nif (i % 2)\n{\ncontinue;\n}\nelse if (i == 8)\n{\nbreak;\n}\ncout &lt;&lt; i &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"loops/#assignment-6","title":"Assignment 6","text":"<p>Create a C++ program named <code>square.cpp</code> that prompts for length of a square. The program will then display a square of the given length in the terminal.</p> <p>We can use any character to represent the side of a square. A sample run would look like the following.</p> <pre><code>g++ square.cpp -o square\n./square\nEnter length: 6\n******\n*    *\n*    *\n*    *\n*    *\n******\n</code></pre> Sample Solution square.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint length;\nint c;\ncout &lt;&lt; \"Enter length: \";\ncin &gt;&gt; length;\nfor (int row = 0; row &lt; length; row++)\n{\nif ((row == 0) || (row == length - 1))\n{\nfor (c = 0; c &lt; length; c++)\n{\ncout &lt;&lt; '*';\n}\ncout &lt;&lt; endl;\n}\nelse\n{\ncout &lt;&lt; '*';\nfor (c = 0; c &lt; length - 2; c++)\n{\ncout &lt;&lt; ' ';\n}\ncout &lt;&lt; '*' &lt;&lt; endl;\n}\n}\n}\n</code></pre>"},{"location":"loops/#assignment-7","title":"Assignment 7","text":"<p>Create a C++ program named <code>odd-or-even.cpp</code> that would keep prompting for a number and tell if that number is odd or even. The program exists if the user enters a negative number.</p> <p>A sample run looks like the following.</p> <pre><code>g++ odd-or-even.cpp -o odd-or-even\n./odd-or-even\nEnter a number: 3\nOdd number\nEnter a number: 2\nEven number\nEnter a number: 1\nOdd number\nEnter a number: 0\nEven number\nEnter a number: -1\nSee you later!\n</code></pre> Sample Solution odd-or-even.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint number;\nwhile (true)\n{\ncout &lt;&lt; \"Enter a number: \";\ncin &gt;&gt; number;\nif (number &lt; 0)\n{\ncout &lt;&lt; \"See you later!\" &lt;&lt; endl;\nbreak;\n}\nelse if (number % 2)\n{\ncout &lt;&lt; \"Odd number\" &lt;&lt; endl;\n}\nelse\n{\ncout &lt;&lt; \"Even number\" &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"loops/#quote","title":"Quote","text":""},{"location":"loops/#assignment-8","title":"Assignment 8","text":"<p>Create a C++ program named <code>print-triangle.cpp</code> that prompts for rows of a triangle. The program will then display a triangle with the given number of rows in the terminal.</p> <p>A sample run looks like the following.</p> <pre><code>g++ print-triangle.cpp -o print-triangle\n./print-triangle\nEnter number of rows for the triangle: 7\n      *\n     **\n    ***\n   ****\n  *****\n ******\n*******\n</code></pre> Sample Solution print-triangle.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint row;\ncout &lt;&lt; \"Enter number of rows for the triangle: \";\ncin &gt;&gt; row;\nfor (int i = 0; i &lt; row; i++)\n{\nfor (int j = row - i - 1; j &gt; 0; j--)\n{\ncout &lt;&lt; \" \";\n}\nfor (int k = 0; k &lt; i + 1; k++)\n{\ncout &lt;&lt; \"*\";\n}\ncout &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"loops/#assignment-9","title":"Assignment 9","text":"<p>Create a C++ program named <code>diamond.cpp</code> that prompts for rows of a diamond, where the number of rows shall be odd. The program will then display a diamond with the given number of rows in the terminal.</p> <p>A sample run looks like the following.</p> <pre><code>g++ diamond.cpp -o diamond\n./diamond\nEnter number of rows: 21\n          *\n         ***\n        *****\n       *******\n      *********\n     ***********\n    *************\n   ***************\n  *****************\n *******************\n*********************\n *******************\n  *****************\n   ***************\n    *************\n     ***********\n      *********\n       *******\n        *****\n         ***\n          *\n</code></pre> Sample Solution diamond.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint row;\nwhile (true)\n{\ncout &lt;&lt; \"Enter number of rows: \";\ncin &gt;&gt; row;\nif (row % 2)\n{\nbreak;\n}\n}\nint i, j;\n// upper part\nfor (i = 0; i &lt; row / 2; i++)\n{\nfor (j = 0; j &lt; row / 2 - i; j++)\n{\ncout &lt;&lt; \" \";\n}\nfor (j = 0; j &lt; 2 * i + 1; j++)\n{\ncout &lt;&lt; \"*\";\n}\ncout &lt;&lt; endl;\n}\n// middle\nfor (j = 0; j &lt; row; j++)\n{\ncout &lt;&lt; \"*\";\n}\ncout &lt;&lt; endl;\n// bottom part\nfor (i = row / 2 + 1; i &lt; row; i++)\n{\nfor (j = 0; j &lt; i - row / 2; j++)\n{\ncout &lt;&lt; \" \";\n}\nfor (j = 0; j &lt; 2 * (row - i) - 1; j++)\n{\ncout &lt;&lt; \"*\";\n}\ncout &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"loops/#assignment-10","title":"Assignment 10","text":"<p>Create a C++ program named <code>plus.cpp</code> that prompts for rows of a plus sign, where the number of rows shall be odd. The program will then display a plus sign with the given number of rows in the terminal.</p> <p>A sample run looks like the following.</p> <pre><code>g++ plus.cpp -o plus\n./plus\nEnter number of rows for the plus: 11\n     *\n     *\n     *\n     *\n     *\n***********\n     *\n     *\n     *\n     *\n     *\n</code></pre> Sample Solution plus.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint row;\nwhile (true)\n{\ncout &lt;&lt; \"Enter number of rows for the plus: \";\ncin &gt;&gt; row;\nif (row % 2)\n{\nbreak;\n}\n}\nint i, j;\nfor (i = 0; i &lt; row; i++)\n{\nif (i != row / 2)\n{\nfor (j = 0; j &lt; row / 2; j++)\n{\ncout &lt;&lt; \" \";\n}\ncout &lt;&lt; \"*\" &lt;&lt; endl;\n}\nelse\n{\nfor (j = 0; j &lt; row; j++)\n{\ncout &lt;&lt; \"*\";\n}\ncout &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"loops/#assignment-11","title":"Assignment 11","text":"<p>We can generate a random number with the help of <code>cstdlib</code> lib. See the following example for a random within 1 and 1000.</p> print-random-number.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\nusing namespace std;\nint main()\n{\nsrand(time(0));\nint number = rand() % 1000 + 1;\ncout &lt;&lt; \"Random number is \" &lt;&lt; number &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>Create a C++ program named <code>number-guessing-game.cpp</code> that sets a random number (1 to 1000) for user to guess. It will display \"Bingo!\" if the user provides an exact match. If not, prompts the user if the number is higher or lower. Keep the game playing till the random number is provided.</p> <p>A sample run looks like the following.</p> <pre><code>g++ number-guessing-game.cpp -o number-guessing-game\n./number-guessing-game\nYour guess is 500\nIt should be higher...\nYour guess is 750\nIt should be lower...\nYour guess is 625\nIt should be lower...\nYour guess is 575\nIt should be lower...\nYour guess is 535\nIt should be higher...\nYour guess is 550\nIt should be higher...\nYour guess is 560\nIt should be lower...\nYour guess is 555\nIt should be lower...\nYour guess is 553\nIt should be higher...\nYour guess is 554\nBingo!\n</code></pre> Sample Solution number-guessing-game.cpp<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdlib&gt;\nusing namespace std;\nint main()\n{\nsrand(time(0));\nint number = rand() % 1000 + 1;\nint guess;\nwhile (true)\n{\ncout &lt;&lt; \"Your guess is \";\ncin &gt;&gt; guess;\nif (guess == number)\n{\ncout &lt;&lt; \"Bingo!\" &lt;&lt; endl;\nbreak;\n}\nelse if (guess &gt; number)\n{\ncout &lt;&lt; \"It should be lower...\" &lt;&lt; endl;\n}\nelse\n{\ncout &lt;&lt; \"It should be higher...\" &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"pointers/","title":"C++ Pointers","text":""},{"location":"pointers/#basics","title":"Basics","text":"<p>When a variable is created, a memory address is assigned to that variable. And When we assign some value to the variable, the value is stored in that memory address.</p> <p>We can use <code>&amp;</code> operator to get the memory address of a variable.</p> show-mem-addr.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring car = \"Tesla\";\ncout &lt;&lt; car &lt;&lt; endl;\ncout &lt;&lt; &amp;car &lt;&lt; endl;\nreturn 0;\n}\n</code></pre> <p>A variable that stores the memory address is a pointer. Be aware that since a pointer points to the memory address of a variable. If we change the value of pointer, the value of original variable would also change.</p> create-ptr.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nstring car = \"Tesla\";\nstring *ptr = &amp;car;\ncout &lt;&lt; car &lt;&lt; endl;\ncout &lt;&lt; &amp;car &lt;&lt; endl;\ncout &lt;&lt; endl;\ncout &lt;&lt; ptr &lt;&lt; endl;\ncout &lt;&lt; *ptr &lt;&lt; endl;\ncout &lt;&lt; endl;\n*ptr = \"Ford\";\ncout &lt;&lt; ptr &lt;&lt; endl;\ncout &lt;&lt; *ptr &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"pointers/#pointer-of-array","title":"Pointer of Array","text":"<p>When using with pointer with an array, we can easily change the pointer's location by adding index.</p> array-ptr.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};\nint *ptr = arr;\nfor (int i = 0; i &lt; sizeof(arr) / sizeof(int); i++)\n{\ncout &lt;&lt; *(ptr + i) &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"pointers/#assignment-16","title":"Assignment 16","text":"<p>Write a C++ program named <code>double-down.cpp</code> to find the max of an integer data set and double that maximum. The program will ask the user to input the number of data values in the set and each value. Then the program displays the max value. Later, double the max and display the whole data set.</p> <p>A sample run looks like the following.</p> <pre><code>g++ double-down.cpp -o double-down\n./double-down\nEnter number of values: 5\nEnter values in array:\n1\n2\n5\n4\n3\nMax is 5\nAfter doubling down:\n1 2 10 4 3\n</code></pre> Sample Solution double-down.cpp<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nint main()\n{\nint n;\ncout &lt;&lt; \"Enter number of values: \";\ncin &gt;&gt; n;\ncout &lt;&lt; \"Enter values in array:\" &lt;&lt; endl;\nint arr[n];\nfor (int i = 0; i &lt; n; i++)\n{\ncin &gt;&gt; arr[i];\n}\nint *ptr = arr;\nint max = 0;\nfor (int j = 1; j &lt; n; j++)\n{\nif (*(ptr + j) &gt; *(ptr + max))\n{\nmax = j;\n}\n}\ncout &lt;&lt; \"Max is \" &lt;&lt; *(ptr + max) &lt;&lt; endl;\ncout &lt;&lt; \"After doubling down:\" &lt;&lt; endl;\n*(ptr + max) = 2 * *(ptr + max);\nfor (int j = 0; j &lt; n; j++)\n{\ncout &lt;&lt; *(ptr + j) &lt;&lt; \" \";\n}\ncout &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"pointers/#extra-practice","title":"Extra practice","text":"<p>The Kattis Problem Archive is also fun to solve.</p>"}]}